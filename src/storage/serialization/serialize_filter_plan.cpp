//===----------------------------------------------------------------------===//
// This file is automatically generated by scripts/generate_serialization.py
// Do not edit this file manually, your changes will be overwritten
//===----------------------------------------------------------------------===//

#include "duckdb/common/serializer/serializer.hpp"
#include "duckdb/common/serializer/deserializer.hpp"
#include "duckdb/optimizer/predicate_transfer/dag.hpp"

namespace duckdb {

void FilterPlan::Serialize(Serializer &serializer) const {
	serializer.WritePropertyWithDefault<vector<ColumnBinding>>(200, "build", build);
	serializer.WritePropertyWithDefault<vector<ColumnBinding>>(201, "apply", apply);
	serializer.WritePropertyWithDefault<vector<LogicalType>>(202, "return_types", return_types);
	serializer.WritePropertyWithDefault<vector<idx_t>>(203, "bound_cols_build", bound_cols_build);
	serializer.WritePropertyWithDefault<vector<idx_t>>(204, "bound_cols_apply", bound_cols_apply);
}

unique_ptr<FilterPlan> FilterPlan::Deserialize(Deserializer &deserializer) {
	auto result = duckdb::unique_ptr<FilterPlan>(new FilterPlan());
	deserializer.ReadPropertyWithDefault<vector<ColumnBinding>>(200, "build", result->build);
	deserializer.ReadPropertyWithDefault<vector<ColumnBinding>>(201, "apply", result->apply);
	deserializer.ReadPropertyWithDefault<vector<LogicalType>>(202, "return_types", result->return_types);
	deserializer.ReadPropertyWithDefault<vector<idx_t>>(203, "bound_cols_build", result->bound_cols_build);
	deserializer.ReadPropertyWithDefault<vector<idx_t>>(204, "bound_cols_apply", result->bound_cols_apply);
	return result;
}

} // namespace duckdb
